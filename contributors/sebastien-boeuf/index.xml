<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Sebastien Boeuf on</title><link>https://www.cloudhypervisor.org/contributors/sebastien-boeuf/</link><description>Recent content in Sebastien Boeuf on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Thu, 07 Jul 2022 08:00:00 +0000</lastBuildDate><atom:link href="https://www.cloudhypervisor.org/contributors/sebastien-boeuf/index.xml" rel="self" type="application/rss+xml"/><item><title>Memory Management Techniques</title><link>https://www.cloudhypervisor.org/blog/memory-management-techniques/</link><pubDate>Thu, 07 Jul 2022 08:00:00 +0000</pubDate><guid>https://www.cloudhypervisor.org/blog/memory-management-techniques/</guid><description>Depending on the expectations around the workload running in a Virtual Machine (VM), as well as the agreement between a customer and an operator, multiple use cases related to memory management between host and guest arise and they can be addressed through different techniques.
Host Managed # This section is about how memory can be managed by the host, as it knows the VM is going to need more or less memory during its runtime.</description></item><item><title>Achieving Bare Metal Performance Within a Virtual Machine</title><link>https://www.cloudhypervisor.org/blog/achieving-bare-metal-performance-within-a-virtual-machine/</link><pubDate>Thu, 19 May 2022 08:00:00 +0000</pubDate><guid>https://www.cloudhypervisor.org/blog/achieving-bare-metal-performance-within-a-virtual-machine/</guid><description>There are use cases for which a workload needs to access specific hardware such as accelerators, GPU or network adapters to maximise potential performance. And since these workloads run inside virtual machines (VM) for security reasons, the challenge is to make this hardware available from within the VM, but without degrading the performance that can be achieved from bare metal.
VFIO, the Ideal Choice # This is a mature framework allowing a PCI device to be bound to the vfio-pci driver instead of the default driver it is usually attached to.</description></item></channel></rss>